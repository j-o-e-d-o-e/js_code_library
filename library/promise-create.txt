promise->creation

definitive, ch.13.2.6

(1) Promises based on other Promises
    - given a promise, create a new obj by calling .then() on it
(2) Promises based on synchronous values
    - Promise.resolve() returns a Promise that will be immediately fulfilled to given val
        - single arg: val to be returned
    - Promise.reject() returns a Promise that will be rejected with given val as the reason
        - single arg: val to be returned (like Promise.resolve())
        - e.g. if error detected, report that error by returning a Promise before beginning an asnc operation
(3) Promise()-constructor
    - one arg: func with two params
        - 1st param: func, by convention, named 'resolve'
        - 2nd param: func, by convention, named 'reject'
        - func performs async operation and then calls either resolve or reject
    - returned Promise is under the control of the passed func

EXAMPLE
(1)
// Promise returned by getJson() resolves to the Promise returned by resp.json()
function getJSON(url) {
    return fetch(url).then(resp => resp.json());
}
(3)
function wait(duration) {
    return new Promise((resolve, reject) => {
        if (duration < 0) reject(new Error("Invalid arg: Time travel not yet implemented"));
        setTimeout(resolve, duration);
    });
}
wait(2000)
    .then(r => console.log("Waited for 2 secs."))
    .catch(e => console.log(e));
