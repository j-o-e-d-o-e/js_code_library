node

definitive, ch.16

- JS with bindings to the underlying OS to allow read/write operations and access to system resources
    - single-threaded
    - event-based
        - 'event loop': triggered when an event happens at which time the OS starts it running again
    - async (non-blocking), by default
        - high concurrency (multiple computations at the same time) despite single-threaded model
        - e.g. also read/write operations from local OS are asnyc (1)
        - util.promisify() creates Promise-based func of many Node's callback-based APIs (2)
            - alternatively, using keywords async and await
            - for read/write, 'fs.promises'-obj has predefined Promise-based funcs
        - synchronous/blocking funcs are labeled typically with 'Sync' at the end
- global process-obj
    - process.argv for command-line args as an arr of strings (3)
        - 1st elem: path to node executable
        - 2nd elem: path to executed JS file
        - further : passed command-line args
    - process.env for environment variables
    - cwd() returns the current working dir
    - exit() terminates the program
- by default, node installation includes the npm-package manager
- program life cycle
    - to start, 'node'-command expects a file to be run, e.g. node test.js
    - to exit, process.exit() or Ctrl-C
- modules (CommonJS modules)
    - since node 13, support for ES modules
    - module type of file by its suffix
        - .mjs: loaded as ES module => import/export
        - .cjs: loaded as CommonJS module => require() provided
    - module type of file by nearest package.json
        - "type": "module": loads as ES module
        - "type": "commonjs": loads as CommonJS module
        - defaults to CommonJS module

- SEE ALSO
    - docs: nodejs.org/api
    - entry: module

EXAMPLE
(1)
const fs = require('fs'); // fs = filesystem
fs.readFile('./test.json', "utf8", (err, text) => { console.log(text); });
(2)
const util = require('util');
const pfs = { readFile: util.promisify(fs.readFile) };
pfs.readFile('./test.json', 'utf-8').then(text => console.log(text));
(3)
console.log(process.argv); // => [ '/usr/bin/node' ]
(4)
node -p -e 'process.env' // on command-line, shows config
