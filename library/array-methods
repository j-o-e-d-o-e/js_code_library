array->methods

definitive, ch.7.8.1

methods defined by the Array class/prototype

(1) iterators
    - accept a func as their 1st arg and invoke that func on each elem
    - in most cases, supplied func is invoked with 3 args
        - value of elem
        - index of elem
        - array itself
    - if sparse array, func is not invoked for non-existent elems
    - forEach() iterates over array (see also entry: for..of/for..in) (1.1)
    - map() passes elems to the supplied func and returns new arr (1.2)
    - filter() returns subset of the original array using a predicate (1.3)
    - find() resp. findIndex() returns the 1st machting elem resp. index using a predicate (1.4)
        - if no machting elem, find() resp. findIndex() returns undefined resp. -1
    - every() returns true if predicate returns true for all elems (1.5)
        - stops iterating the first time the predicate returns false
    - some() returns true if there exists at least one elem for which predicate return true
        - stops iterating the first time predicate returns true
    - reduce() resp. reduceRight() combines elems to produce a single value (1.6)
        - takes two args: func and (optional) initial value
    - reverse() reverses array (1.7)
(2) flattening
    - flat() creates and returns a new flattened array (2.1)
        - arg specifies nesting level to flat
        - without args: flattens one level of nesting
    - flatMap() combines flat() and map() (2.2)
        - calling a.flatMap(f) is the same as (but more efficient than) a.map(f).flat()
(3) concatenation
    - concat() creates and returns a new array containing elems of the arrays
    - join() returns a new string with all elems separated as defined by arg
(4) stacks/queues
    - push() appends one or more values to the end of an array and returns new length (4)
    - pop() deletes the last element, decrements the length and returns the value (4)
        - push() and pop() modify the array in place
    - unshift() adds elements at the start (shifting existing elems up), increments length and returns length
    - shift() removes 1st elem (shifting all elems down), decrements length and returns its value
(5) subarrays
    - slice(start, end) returns a subarray with the elements between start (inclusive) and end (exclusive) (5.1)
        - if only one arg: all elems from start to end of the array
        - if arg(s) negative, they represent the indexes starting from the end of the arr
        - also supported by strings
    - splice() removes elems, inserts new elems or performs both operations (5.2)
        - modifies the array in place
        - 1st arg: start pos for insertion and/or deletion
        - 2nd arg: number of elements to be deleted
            - if omitted, all elems from start pos to end are deleted
            - if zero, no removal
        - additional args:  elems to be inserted starting at start pos (1st arg)
            - if omitted, no insertion
        - returns an array of the deleted elems
    - fill() sets elems to a specified value (5.3)
        - modifies array in place
        - 1st arg: value for elems
        - 2nd arg: starting index
            - if omitted, starts at index 0
        - 3rd arg: exlusive ending index (optional)
        - returns the modified array
(6) search/sort
    - also supported by strings
    - indexOf() resp. lastIndexOf() searches for an elem from the start resp. end (6.1)
        - returns the index of the first such elem if found, otherwise -1
        - uses equivalent of operator ===
        - 2nd arg: index at which to begin searching (optional)
    - includes() checks whether a given value exists in the array
    - sort() sorts the elems in place and returns the sorted array (6.2)
        - no args: in alphabetical order
        - 1st arg: comparison func
            - two args: elems of arr
            - if func returns negative num, 1st arg before 2nd arg
            - if positive num, 2nd arg before 1st arg
            - if zero, order stays the same
    - reverse() reverses the order of the elems of an array in place
(7) array-to-string conversions
    - join() converts all elems to strings and concatenates them, returning the resulting string
        - 1st arg: delimiter (optional)
        - if arg omitted, a comma is used as separator/delimiter (like toString())
        - opposite of String.split()
- SEE ALSO
    - developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods

EXAMPLE
(1.1)
let data = [1, 2, 3, 4, 5]
data.forEach((v, i, a) => { a[i] = v + 1; }); // data == [2,3,4,5,6]
(1.2)
[1, 2, 3].map(x => x * x) // => [1, 4, 9]
(1.3)
[5, 4, 3, 2, 1].filter((x, i) => i % 2 === 0) // => [5, 3, 1]
(1.4)
[1,2,3,4,5].findIndex(x => x < 0) // => -1
(1.5)
[1,2,3,4,5].every(x => x < 10) // => true
(1.6)
let arr = [1, 2, 3];
let res = arr.reduce((accumulator, current) => accumulator * current, 2); // => 12

res = arr.reduce((acc, current) => {
        if (current % 2 === 0) acc.even.push(current);
        else acc.odd.push(current);
        return acc;
    }, {even: [], odd: []}
); // { even: [ 2 ], odd: [ 1, 3 ] }
(1.7)
[1, 2, 3, 4].reverse(); // => [4, 3, 2, 1]
(2.1)
[1, [2, 3]].flat() // => [1, 2, 3]
(2.2)
let phrases = ["hello world", "the definitive guide"];
let words = phrases.flatMap(phrase => phrase.split(" "));
words // => ["hello", "world", "the", "definitive", "guide"];
(3)
let a = [1,2,3];
a.concat(4, 5); // => [1,2,3,4,5]
a.concat([4,5],[6,7]); // => [1,2,3,4,5,6,7]; // a + [4,5] + [6,7]
(4)
let stack = [];
console.log(stack.push(1, 2)); // stack == [1, 2] => 2 (length)
console.log(stack.pop()) // stack == [1] => 2
(5.1)
let a = [1,2,3,4,5];
a.slice(1,-1); // => [2,3,4]
a.slice(-3,-2); // => [3]
(5.2)
const arr = ['1', '2', '5', '6'];
// inserts an elem at index 2
arr.splice(2, 0, '3'); // ['1', '2', '3', '5', '6']
// removes 2 elems starting at index 3 and inserts 3 elems
const rem = arr.splice(3, 2, '4', '5'); // ['1', '2', '3', '4', '5']
// rem = ['5', '6']
// removes 1 elem at index 1
arr.splice(1, 1);
// => ['1', '3', '4', '5']
(5.3)
let a = new Array(5);
a[0] = 0;
a.fill("x", 1) // => a == [ 0, 'x', 'x', 'x', 'x' ]
(6.1)
[0,1,2,0].indexOf(1) // => 1
(6.2)
let a = [33, 4, 1111, 222];
a.sort(); // a == [1111, 222, 33, 4];
a.sort((a, b) => { return a - b; }); // a == [4, 33, 222, 1111]
