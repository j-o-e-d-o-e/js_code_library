object->properties

eloquent, p.61ff./definitive, ch.6

properties (name:value) are seperated by commas
    - properties whose names aren't valid binding names have to be quoted

two ways to create/set or get
    - dot-operator (1)
        - uses literal name of the addressed property
        - works only with names that look like valid binding names (without special characters)
        - 'obj.prop=val' replaces the property's value if it already existed or creates a new property on the object
    - square brackets (2)
        - expression is evaluated to get the property name
        - useful for properties containing special chars, e.g. obj['key with whitespace']
        - for elements in an array (since nums aren't valid binding names)
conditionally access properties with '?.' (3)
    - since ES 2020, optional chaining operator
    - if not sure whether obj contains a prop whose props are requested
    - if not the case, 'undefined' is returned
    - '??' allows to set default value if prop is null or undefined (nullish coalescing operator)

'delete obj.prop' removes the named property from the object
    - deletes only own properties, not inherited ones from prototype
    - evaluates to true if deletion succeeded or if it had no effect (like deleting a non-existent prop)
    - array notation: delete obj["prop"]
'prop in obj' tells whether that object has a property with that name (including prototype's properties) (4)
'obj.hasOwnProperty(prop)' checks whether that object has that given property (prototype excluded)
'Object.keys(obj)' returns an array of strings: the object's property names (not those in its prototype) (5)
'Object.assign(objA, objB)' copies all properties from object B into object A
    - expects two or more objs as args
    - modifies and returns the first arg
    - props in target obj are overwritten if existing in source objs

EXAMPLE
(1)
obj.x
(2)
let ls = {
    'Mary Jane': 1,
};
ls["Joe Doe"] = 21; // { 'Mary Jane': 1, 'Joe Doe': 21 }
(3)
let devices = { laptop: "think-pad" };
devices.desktop.cpu; // TypeErrorw
devices.desktop?.cpu; // undefined
devices.desktop.gpu ?? "nothing"; // TypeError
devices.desktop?.gpu ?? "nothing"; // nothing
(4)
let descr = {
    "thoughts on this lib": "address the details",
    entries: undefined
};
console.log("thoughts on this lib" in descr); // -> true
(5)
let ls = {
    'Mary Jane': 1,
    'Joe Doe': 2,
};
for (let name of Object.keys(ls)) { // alternatively, for..in
    ls[name] += 100;
} // { 'Mary Jane': 101, 'Joe Doe': 102 }
