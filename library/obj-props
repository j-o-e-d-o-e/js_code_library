object->properties



- properties are key-value-pairs (key:val)
    - keys that aren't valid binding names have to be quoted
- 2 ways to create/set or get
    (1) dot-operator
        - accepts only static keys
        - keys must not include special characters or whitespace
        - 'obj.key=val' replaces the prop's val if it already existed or creates a new prop
        - optional chaining operator '?.' (1.2)
            - if not sure whether obj (parent) contains a prop whose props are requested
            - if not, 'undefined' is returned
        - nullish coalescing operator '??' (both since ES 2020)
            - allows to set default val if prop is null or undefined
    (2) square brackets
        - allows for dynamic keys (evaluated from an expression during runtime)
            - e.g. concatenated string, return val from a func
        - for keys containing special chars, e.g. obj['key with whitespace']
        - also applicable for elem in an array (since nums aren't valid bindings)
- delete obj.key: removes prop associated with key from obj
    - deletes only props of this, not inherited ones from prototype
    - evaluates to true if deletion succeeded or if it had no effect (like deleting a non-existent prop)
    - array notation: delete obj["key"]
- key in obj: tells whether obj has a prop with that key (including prototype's props) (3)
- Object.hasOwn(obj, key): checks whether obj has property with given key (prototype excluded)
    - alternatively: obj.hasOwnProperty(key)
- Object.keys(obj): returns array of strings containing the obj's prop-keys (not those in its prototype) (4)
- Object.assign(objA, objB): copies all props from objB into objA
    - expects two or more objs as args
    - modifies and returns the 1st arg
    - props in target obj are overwritten if existing in source objs

- SEE ALSO
    - eloquent, p.61ff.
    - definitive, ch.6
    - /exercism/javascript/high-score-board
    - /exercism/javascript/amusment-park
    - /exercism/javascript/palindrome-products

EXAMPLE
(1)
let devices = { laptop: "think-pad" };
devices.desktop.cpu;                // => TypeError
devices.desktop?.cpu;               // => undefined
devices.desktop.gpu ?? "nothing";   // => TypeError
devices.desktop?.gpu ?? "nothing";  // => nothing

(2)
let ls = {
    'Mary Jane': 1,
};
ls["Joe Doe"] = 21;                 // ls = { 'Mary Jane': 1, 'Joe Doe': 21 }

(3)
let descr = {
    "thoughts on this lib": "address the details",
    entries: undefined
};
"thoughts on this lib" in descr;    // => true

(4)
let ls = {
    'Mary Jane': 1,
    'Joe Doe': 2,
};
for (let name of Object.keys(ls)) { // alternatively, for..in
    ls[name] += 100;
}                                   // ls = { 'Mary Jane': 101, 'Joe Doe': 102 }
