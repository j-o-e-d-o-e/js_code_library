map

eloquent, p.108/defintive, ch.11.1.2

- iterable collection of key/value-pairs
    - any value can be used as key (or val), including reference-types like objs and arrs as well as null and NaN
    - compares keys by identity, not by equality (like Set)
    - each iterated value is a two-elem array [key, value]
    - iterates in insertion order (like Set, surprisingly)
    - WeakMap does not prevent its keys from being garbage collected
- constructor
    - arg: iterable that yields two element [key, value] arrays (including other Map objs)
    - if arg omitted, empty map
- size-property tells how many keys the map contains (like length-property of an arr)
- methods
    - get() queries the value associated with a given key
    - set() adds a new entry
        - takes single key/value-pair as arg
        - if key already exists, its value will be changed
        - to add multiple pairs, use chained method calls
    - has() checks whether that map contains the specified key
    - delete() removes a key and its associated val
    - clear() removes al key/value-pairs
    - keys() returns the keys
    - values() returns the vals
    - entries() returns key/value-pairs
    - forEach() supported (val before key-param), e.g. m.forEach((v, k) => {...});
- since ES6
- SEE ALSO
    - /exercism/javascript/nucleotide-count

EXAMPLE
let m = new Map([["one", [1]], ["two", [2]]]);
m.set("three", [3]).set("four", [4, 4.4]);

arr = m.get("one")
arr[arr.length] = 1.1;
console.log([...m]);
// [[ 'one', [1, 1.1] ], [ 'two', [2] ], [ 'three', [3] ], [ 'four', [4, 4.4] ]]

m.delete("three");
for (let [k, v] of m)
    console.log(v); // => [ 1, 1.1 ] [ 2 ] [ 4, 4.4 ]
