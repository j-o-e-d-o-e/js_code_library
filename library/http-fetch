http->fetch

definitive, ch. 15.11.1

Promise-based API for making HTTP requests in browser
  - for node, import required: const fetch = require('node-fetch')
fetch()
    - 1st arg: url
        - alternatively, new Request() with 1st and 2nd arg
    - 2nd arg: options (optional)
        - header, e.g. {headers: new Headers({"Content-Type":"application/json"})}
        - POST, e.g. {method: "POST", body: "content"}
    - returns promise which resolves to Response obj with props, e.g.
        - status: HTTP status code
        - ok: true, if status === 200
        - bodyUsed: true, if body-stream (Readable stream obj) has already been read
typically, two then()-calls
    (1) fetch() asks for response and returns promise
        - fulfilled promise represents response
    (2) text()/json() access response-body with content-type text resp. json and return promise
        - fulfilled promise represents transferred data

EXAMPLE
<!-- server startup time: ~10secs (if still online) -->
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <p> Fetch results:</p>
  </body>
  <script type="text/javascript">
    fetch('https://traffic-tracker.herokuapp.com/api/years/current')
    .then(resp => {
      if (resp.ok) return resp.json();
    })
    .then(content => {
      let res = `In ${content.year}, ${content.total} flights in total, so far.`;
      document.body.innerHTML += res;
    })
    .catch(err => {
      console.log("Error while fetching")
    });
  </script>
</html>
